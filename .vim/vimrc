" Move temporary files to a secure location to protect against CVE-2017-1000382
if exists('$XDG_CACHE_HOME')
	let &g:directory=$XDG_CACHE_HOME
else
	let &g:directory=$HOME . '/.cache'
endif
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
	silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
	silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
	silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif

filetype plugin on
syntax on
if $TERM isnot# 'linux'
	set termguicolors
endif
if &compatible
	set nocompatible
endif
set backspace=indent,eol,start
set breakindent breakindentopt=shift:2,sbr showbreak=â†³
set clipboard=unnamed,exclude:cons\|linux
set diffopt+=iwhite
set foldmethod=syntax foldlevelstart=99
set history=1000
set hlsearch incsearch ignorecase smartcase
set iskeyword+=:
set linebreak
set list listchars=tab:\ \ ,extends:>,precedes:<
set modeline undofile
set mouse=a
set ruler showcmd title
set scrolloff=3 display=lastline
set shiftwidth=2 expandtab smarttab autoindent smartindent
set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc suffixes-=.h suffixes-=.obj
set t_EI=[1\ q t_SR=[3\ q t_SI=[5\ q t_Cs=[4:3m t_Ce=[4:0m t_CR=[58;5;9m t_CG=[58;5;10m t_CY=[58;5;9m t_C0=[59m
set ttimeout ttimeoutlen=100
set viminfofile=~/.vim/viminfo
set wildmenu wildmode=longest:full,full

let g:netrw_banner = 0
let g:python_recommended_style = 0
let g:tex_comment_nospell = 1
let g:tex_fold_enabled = 1

au FileType tex setlocal spell
au FileType python setlocal foldmethod=indent
au BufWritePre /tmp/* setlocal noundofile
au BufReadPost *
\ if line("'\"") > 1 && line("'\"") <= line('$') && &ft !~# 'commit'
\|  exe 'normal! g`"'
\|endif

hi Error ctermbg=1 guibg=DarkRed
hi ErrorMsg ctermbg=1 guibg=DarkRed
hi Folded NONE ctermfg=14 guifg=Cyan
hi NonText guifg=DarkCyan
hi Pmenu ctermbg=6 guibg=DarkMagenta
hi PmenuSel ctermfg=0 ctermbg=13 guifg=Blue guibg=Magenta
hi SpellBad NONE cterm=undercurl guisp=Red start=t_Cs,t_CR stop=t_C0,t_Ce
hi SpellCap NONE cterm=undercurl guisp=Green start=t_Cs,t_CG stop=t_C0,t_Ce
hi SpellRare NONE cterm=undercurl guisp=Yellow start=t_Cs,t_CY stop=t_C0,t_Ce
hi Visual guibg=#403d3d
hi debugPC guibg=DarkBlue
hi manUnderline guifg=Green
hi manBold cterm=bold

command! DiffOrig vert new | set bt=nofile | r ++edit # |
\	0d_ | diffthis | wincmd p | diffthis

runtime! ftplugin/man.vim

if executable('gdb')
	packadd termdebug
endif

nmap <Leader>/ :noh<CR>
nmap Y y$

augroup Binary
	au!
	au BufReadPost  * if &binary
	au BufReadPost  *   silent %!xxd
	au BufReadPost  *   set ft=xxd
	au BufReadPost  * endif
	au BufWritePre  * if &binary
	au BufWritePre  *   silent %!xxd -r
	au BufWritePre  * endif
	au BufWritePost * if &binary
	au BufWritePost *   silent %!xxd
	au BufWritePost *   set nomod
	au BufWritePost * endif
augroup END

let s:plugins = {}

let s:plugins.EasyAlign = #{
\		url: 'junegunn/vim-easy-align',
\	}
function s:plugins.EasyAlign.setup()
	xmap ga <Plug>(EasyAlign)
	nmap ga <Plug>(EasyAlign)
	let g:easy_align_delimiters = {
	\		'/': #{
	\			pattern:         '//\+\|/\*\|\ \*',
	\			delimiter_align: 'l',
	\			ignore_groups:   [],
	\		},
	\		'\': #{
	\			pattern:         '\\',
	\			indentation:     'keep',
	\			left_margin:     1,
	\			delimiter_align: 'center',
	\			ignore_groups:   ['String', 'Comment'],
	\		},
	\	}
	autocmd FileType markdown imap <buffer> <Bar> <Bar><Esc>m`gaip*<Bar>``A
endfunction

let s:plugins.tagbar = #{
\		if: executable('ctags'),
\		url: 'majutsushi/tagbar',
\		opts: #{ on_cmd: 'TagbarToggle' },
\	}

let s:plugins.vimtex = #{
\		if: executable('latexmk'),
\		url: 'lervag/vimtex',
\	}
function s:plugins.vimtex.setup()
	let g:vimtex_compiler_latexmk = #{ build_dir: 'build' }
	let g:vimtex_compiler_latexmk_engines = {'_': '-lualatex'}
	if executable('llpp.inotify')
		let g:vimtex_view_general_viewer = 'llpp.inotify'
	endif
	autocmd FileType tex inoremap <expr> <buffer> `` vimtex#imaps#wrap_math("``", '`')
endfunction

let s:plugins.coc = #{
\		if: executable('yarn'),
\		url: 'neoclide/coc.nvim',
\		opts: #{ branch: 'release' },
\	}
function s:plugins.coc.setup()
	call coc#add_extension('coc-vimlsp', 'coc-tsserver', 'coc-snippets', 'coc-python', 'coc-json', 'coc-highlight')
	nmap <silent> gd <Plug>(coc-definition)
	nmap <silent> gy <Plug>(coc-type-definition)
	nmap <silent> gi <Plug>(coc-implementation)
	nmap <silent> gr <Plug>(coc-references)
	" coc-snippets:
	let g:coc_snippet_next = '<c-j>'
	let g:coc_snippet_prev = '<c-k>'
endfunction

let s:plugins.manman = #{
\		if: executable('man'),
\		url: 'baltitenger/manman',
\	}

let s:plug_new = 0
if !filereadable(expand('~/.vim/autoload/plug.vim')) && executable('curl')
	echo 'Downloading vim-plug...'
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
	\	https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	let s:plug_new = 1
endif

call plug#begin('~/.vim/plugged')
for plugin in values(s:plugins)
	if !has_key(plugin, 'if') || plugin.if
		if has_key(plugin, 'opts')
			Plug plugin.url, plugin.opts
		else
			Plug plugin.url
		endif
	endif
endfor
call plug#end()

if s:plug_new
	PlugInstall --sync
endif

for plugin in values(s:plugins)
	if !has_key(plugin, 'if') || plugin.if
		if has_key(plugin, 'setup')
			call plugin.setup()
		endif
	endif
endfor

" vim: ts=2 sw=0 noet
